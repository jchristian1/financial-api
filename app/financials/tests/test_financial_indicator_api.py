"""
Tests for the financial indicator APIs.
"""
from django.contrib.auth import get_user_model
from django.test import TestCase
from django.urls import reverse

from rest_framework import status
from rest_framework.test import APIClient

from core.models import FinancialIndicator

from financials.serializers import (
    FinancialIndicatorSerializer,
    FinancialIndicatorDetailSerializer,
)


FINANCIAL_INDICATOR_URL = reverse('financials:indicator-list')


def detail_url(financial_indicator_id):
    """Create and return financial indicator url."""
    return reverse('financials:indicator-detail', args=[financial_indicator_id])


def create_financial_indicator(**params):
    """Create and return a financial indicator sample."""
    defaults = {
        'decription': 'Revenue is the total amount of income generated by the sale of goods or services related to the companys primary operations. Revenue, also known as gross sales, is often referred to as the top line because it sits at the top of the income statement.',
        'indicator_name': 'Revenue',
        'tag': 'revenue',
    }
    defaults.update(params)

    financial_indicator = FinancialIndicator.objects.create(**defaults)
    return financial_indicator


def create_user(**params):
    """Create and return a new user."""
    return get_user_model().objects.create_user(**params)


class PublicFinancialIndicatorTests(TestCase):
    """Tests unauthenticated request for the financial indicator APIs."""

    def setUp(self):
        client = APIClient()

    def test_auth_required(self):
        """Test auth is required to call API."""
        res = self.client.get(FINANCIAL_INDICATOR_URL)

        self.assertEqual(res.status_code, status.HTTP_401_UNAUTHORIZED)


class PrivateFinancialIndicatorTests(TestCase):
    """Test authenticated request for the financial indicator APIs."""

    def setUp(self):
        self.client.get(FINANCIAL_INDICATOR_URL)
        self.user = create_user(email='test@example.com', password='testpass123')
        self.client.force_authenticate(self.user)


